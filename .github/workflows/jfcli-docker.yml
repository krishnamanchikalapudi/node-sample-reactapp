name: JF-CLI with Docker
on:
# TURN-OFF on every push 
  push:
    branches: 
      - develop
    paths-ignore: # When the below folders are checked-in, the GitHub Actions job will not start.
    #  - '.github/**'
      - 'node_modules/**'
      - '.jfrog/**'
#   pull_request:
#     branches: [ main ]
# issue_comment triggers this action on each comment on issues and pull requests
  issue_comment:
    types: [created]
  pull_request_target:
    types: [opened, synchronize]
permissions:
  actions: read # for detecting the Github Actions environment.
  id-token: write # for creating OIDC tokens for signing.
  packages: write # for uploading attestations.
  contents: read
  security-events: write # Required for uploading code scanning.
jobs:
  dockernpm:
    name: Docker NPM Package
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest]
        node: [20]
    env:  
      JF_RT_URL: https://${{ vars.JF_NAME }}.jfrog.io
      JF_GIT_TOKEN: ${{ vars.GITHUB_TOKEN }}
      RT_REPO_VIRTUAL: ${{ vars.RT_MVN_REPO_VIRTUAL}}
      RT_DOCKER_REPO_VIRTUAL: ${{ vars.RT_DOCKER_REPO_VIRTUAL}} 
      JOB_SUMMARY: false
      JFROG_CLI_LOG_LEVEL: ${{vars.JFROG_CLI_LOG_LEVEL}} # DEBUG, INFO, WARN, ERROR
      BUILD_NAME: 'node-sample-app-ga'
      BUILD_ID: ${{ github.run_number }} 
      DOCKER_BUILDX_PLATFORMS: 'linux/amd64,linux/arm64'
    runs-on: ${{ matrix.os }}
    steps:
      # Use the specific setup-cli branch. Ref https://github.com/marketplace/actions/setup-jfrog-cli
      - name: Setup JFrog CLI
        uses: jfrog/setup-jfrog-cli@v4
        id: setup-cli
        env:
          JF_URL: ${{env.JF_RT_URL}}
          JFROG_CLI_RELEASES_REPO: '${{ env.JF_RT_URL }}/artifactory/${{ env.RT_MVN_REPO_VIRTUAL}}' 
          JFROG_CLI_EXTRACTORS_REMOTE: '${{ env.JF_RT_URL }}/artifactory/${{ env.RT_MVN_REPO_VIRTUAL}}'
          JF_GIT_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          oidc-provider-name: ${{ vars.JF_OIDC_PROVIDER_NAME }}

      - name: Clone VCS
        uses: actions/checkout@v4 # ref: https://github.com/actions/checkout

      # - name: NodeJs with ver = ${{ matrix.node }}
      #   uses: actions/setup-node@v4  # ref: https://github.com/actions/setup-node
      #   with:
      #     node-version: ${{ matrix.node }}
      #     cache: 'npm'

      - name: Software version
        run: |
          # JFrog CLI version
          jf --version
          # Ping the server
          jf rt ping
          # NodeJS
          node -v
          npm -v
          # Java
          java -version
          # MVN
          mvn -version
          # Docker
          docker -v
          # Python
          python3 -V
          pip3 -V
          # jf config
          jf config show

      - name: Config jf with npm repos # ref: https://docs.jfrog-applications.jfrog.io/jfrog-applications/jfrog-cli/cli-for-jfrog-artifactory/package-managers-integration#setting-npm-repositories
        run: |
          export JFROG_CLI_LOG_LEVEL=${{ env.JFROG_CLI_LOG_LEVEL }}
          export JFROG_CLI_LOG_TIMESTAMP=DATE_AND_TIME

          jf npmc --global --repo-resolve ${{ env.RT_REPO_VIRTUAL}} --repo-deploy ${{ env.RT_REPO_VIRTUAL}} 

          ls -lrta /home/runner/work/node-sample-reactapp/node-sample-reactapp

          pwd
      - name: Docker authentication  # ref https://github.com/marketplace/actions/docker-login
        id: config-docker
        uses: docker/login-action@v3
        with: 
          registry: ${{env.JF_RT_URL}}
          username: ${{ steps.setup-cli.outputs.oidc-user }}
          password: ${{ steps.setup-cli.outputs.oidc-token }}

      - name: Docker buildx instance
        uses: docker/setup-buildx-action@v3   # ref: https://github.com/marketplace/actions/docker-setup-buildx h
        with:
          use: true
          platforms: ${{env.DOCKER_BUILDX_PLATFORMS}} # linux/amd64,linux/arm64 # ref: https://docs.docker.com/reference/cli/docker/buildx/create/#platform
          install: true

      - name: prestep-summary
        run: |
          jfcliv=`jf --version`
          jfdcliv=`docker -v`
          echo "# :frog: Prestep Summary :pushpin:" >> $GITHUB_STEP_SUMMARY
          echo " " >> $GITHUB_STEP_SUMMARY
          echo " " >> $GITHUB_STEP_SUMMARY
          echo " - Installed JFrog CLI [${jfcliv}](https://jfrog.com/getcli/) " >> $GITHUB_STEP_SUMMARY
          echo " - Node ${nodeVer} and NPM ${npmVer} " >> $GITHUB_STEP_SUMMARY
          echo " - Configured the JFrog Cli and Docker login with SaaS Artifactory OIDC integration  " >> $GITHUB_STEP_SUMMARY
          echo " - Docker buildx configured with platforms: [${{env.DOCKER_BUILDX_PLATFORMS}}](https://docs.docker.com/reference/cli/docker/buildx/create/#platform) " >> $GITHUB_STEP_SUMMARY
          echo " " >> $GITHUB_STEP_SUMMARY
# Package
      - name: Xray Audit  # ref: https://docs.jfrog-applications.jfrog.io/jfrog-applications/jfrog-cli/cli-for-jfrog-security/scan-your-source-code
        run: |
          cd /home/runner/work/node-sample-app/node-sample-app
          jf audit --npm=true --format=table --extended-table=true --secrets=true --sast=true --sca=true --licenses=true --fail=false

      - name: npm Build   # ref: https://docs.jfrog-applications.jfrog.io/jfrog-applications/jfrog-cli/cli-for-jfrog-artifactory/package-managers-integration#installing-npm-packages
        run: |
          jf npm install --build-name=${{ env.BUILD_NAME}} --build-number=${{ env.BUILD_ID}} 
        
      - name: npm publish   # ref: https://docs.jfrog-applications.jfrog.io/jfrog-applications/jfrog-cli/cli-for-jfrog-artifactory/package-managers-integration#publishing-the-npm-packages-into-artifactory
        run: |
          jf npm publish --build-name=${{ env.BUILD_NAME}} --build-number=${{ env.BUILD_ID}} 

      - name: Xray Scan
        run: |
          jf scan . --extended-table=true 
      
      - name: Docker image  # ref: https://docs.jfrog-applications.jfrog.io/jfrog-applications/jfrog-cli/cli-for-jfrog-artifactory/package-managers-integration#pushing-docker-images-using-the-docker-client
        run: |
          docker image build -f Dockerfile -t ${{ vars.JF_NAME }}.jfrog.io/${{env.RT_DOCKER_REPO_VIRTUAL}}/${{ env.BUILD_NAME }}:${{ env.BUILD_ID}} --platform "${{env.DOCKER_BUILDX_PLATFORMS}}" --metadata-file "${{env.DOCKER_METADATA_JSON}}" --push .

      - name: Xray Docker scan
        run: |
          jf docker pull ${{ vars.JF_NAME }}.jfrog.io/${{env.RT_DOCKER_REPO_VIRTUAL}}/${{ env.BUILD_NAME }}:${{ env.BUILD_ID}} 
          jf docker scan ${{ vars.JF_NAME }}.jfrog.io/${{env.RT_DOCKER_REPO_VIRTUAL}}/${{ env.BUILD_NAME }}:${{ env.BUILD_ID}}   
      
      - name: Docker image list
        run: |
          docker image ls

 # Build Info
    # US Dept of Commerce: https://www.ntia.gov/page/software-bill-materials
    # US Cyber Defence Agency: https://www.cisa.gov/sbom
    #  NIST: https://www.nist.gov/itl/executive-order-14028-improving-nations-cybersecurity/software-security-supply-chains-software-1
      - name: Collect env
        run: jf rt bce ${{ env.BUILD_NAME}} ${{ env.BUILD_ID}} 
 
      - name: Add VCS info
        run: jf rt bag ${{ env.BUILD_NAME}} ${{ env.BUILD_ID}} 

      - name: Docker build create  
        run: |
          imageDigest=$(cat "${{env.DOCKER_METADATA_JSON}}" | jq '.["containerimage.digest"]')
          # echo "${imageDigest}"
          echo "${{ vars.JF_NAME }}.jfrog.io/${{env.RT_DOCKER_REPO_VIRTUAL}}/${{env.BUILD_NAME }}:${{ env.BUILD_ID}}@${imageDigest}" > ${{env.DOCKER_METADATA_JSON}}

          jf rt bdc ${{env.RT_DOCKER_REPO_VIRTUAL}} --image-file ${{env.DOCKER_METADATA_JSON}} --build-name=${{ env.BUILD_NAME }} --build-number=${{ env.BUILD_ID}}

      - name: Build Publish # ref: https://docs.jfrog-applications.jfrog.io/jfrog-applications/jfrog-cli/cli-command-summaries
        run: jf rt bp ${{ env.BUILD_NAME}} ${{ env.BUILD_ID}} --detailed-summary=true
